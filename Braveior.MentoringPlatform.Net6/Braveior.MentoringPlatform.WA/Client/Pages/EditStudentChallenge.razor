@namespace Braveior.MentoringPlatform.WA.Client.Pages
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IProfileService ProfileService
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Edit Student Challenge
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" Variant="Variant.Outlined" Value="@GetActivityName(StudentChallenge.Type)" Disabled="true" />
            <MudTextField T="string" Variant="Variant.Outlined" Value="@StudentChallenge.Challenge.Name" Disabled="true" />
            <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@StudentChallenge.AssetUrl" />
            <MudDatePicker Label="Date" Editable="true" @bind-Date="@StudentChallenge.CreatedDate" />
            <AuthorizeView Roles="2">
                <Authorized>
                    <MudTextField T="long" Variant="Variant.Outlined" @bind-Value="@StudentChallenge.Points" />
                    <MudRadioGroup @bind-SelectedOption="@StudentChallenge.Status">
                        <MudRadio Option="@(0)" Color="Color.Primary">Pending</MudRadio>
                        <MudRadio Option="@(1)" Color="Color.Secondary">Approved</MudRadio>
                    </MudRadioGroup>
                </Authorized>
            </AuthorizeView>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Primary" OnClick="@(() => UpdateStudentChallenge())">Update Challenge</MudButton>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Default" OnClick="Cancel">Close</MudButton>
        </DialogActions>
    </MudDialog>


    @code {
        private SkillDTO skill;

        //private long points = 0;

        //private int status = 0;

        [CascadingParameter] MudDialogInstance MudDialog { get; set; }

        [Parameter] public StudentActivityDTO StudentChallenge { get; set; }

        private void Cancel()
        {
            MudDialog.Cancel();
        }

        private async Task UpdateStudentChallenge()
        {
            //StudentActivity.Points = points;
            //StudentActivity.Status = status;
            try
            {
                await ProfileService.UpdateStudentChallenge(StudentChallenge);
                MudDialog.Close();
            }
            catch (Exception)
            {
                Snackbar.Clear();
                Snackbar.Add("Error", Severity.Error);
            }
        }
        private string GetActivityName(int id)
        {
            switch (id)
            {
                case 1:
                    return "Group Discussion";
                case 2:
                    return "Hackathon";
                case 3:
                    return "R & D Solutioning";
                case 4:
                    return "Challenge";
                case 5:
                    return "Vlog";
                case 6:
                    return "Blog";
                default:
                    return "General";
            }
        }
        private string GetActivityStatus(int id)
        {
            switch (id)
            {
                case 0:
                    return "Pending";
                case 1:
                    return "Approved";
                default:
                    return "Pending";
            }
        }
        private bool IsEvent(int id)
        {
            if (id == 1 || id == 2 || id == 3)
            {
                return true;
            }
            else
                return false;
        }

    }