@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Secondary" OnClick="LogIn">LogIn</MudButton>
    </NotAuthorized>
    <Authorized>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="false">
            <MudText Class="pr-4" Typo="Typo.subtitle1">Welcome @CommonState.Value.LoggedInUser.FirstName @CommonState.Value.LoggedInUser.LastName </MudText>
        </MudHidden>
            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Secondary" OnClick="Logout">Logout</MudButton>
    </Authorized>
</AuthorizeView>
@code{
    //Dependency Injection for the Fluxor State
    [Inject]
    private IState<CommonState> CommonState { get; set; }

    /// <summary>
    /// Log out the User
    /// </summary>
    /// <returns></returns>
    private async Task Logout()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();

        NavigationManager.NavigateTo("/");
    }
    private async Task LogIn()
    {
        NavigationManager.NavigateTo("/login");
    }
}