@page "/viewstory/{StoryId:long}"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IStoryService StoryService
@inject ISnackbar Snackbar
@*@using TinyMCE.Blazor*@
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    <MudGrid>
        <MudItem lg="8">
            <div Class="d-flex"><MudText Class="mr-auto" Typo="Typo.h6">Story</MudText><MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Large" @onclick="@(() => NavigateEditStory(Story.StoryId))" /></div>
            <MudTextField T="string" Variant="Variant.Outlined" @bind-Text="@Story.Name" Lines="5" ReadOnly="true" /><br />
            <MudText Typo="Typo.h6">Status</MudText>
            <MudChip Color="@GetStatus(Story.Status).Color" Size="Size.Medium">@GetStatus(Story.Status).Value</MudChip>
            <MudText Typo="Typo.h6">Description</MudText>
            @*<Editor Conf="@editorConf" @bind-Value="@Story.Description" ApiKey="l2er93kpxdnkksdayrfy7mrocgpxan4mjxhfz8etl31lxzul" /><br />*@
            <MudTextField T="string" Variant="Variant.Outlined" @bind-Text="@Story.Description" Lines="5" ReadOnly="true" /><br />
            <MudText Typo="Typo.h6">Acceptance Criteria</MudText>
            @*<Editor Conf="@editorConf" @bind-Value="@Story.AcceptanceCriteria" ApiKey="l2er93kpxdnkksdayrfy7mrocgpxan4mjxhfz8etl31lxzul" />*@
            <MudTextField T="string" Variant="Variant.Outlined" @bind-Text="@Story.AcceptanceCriteria" Lines="5" ReadOnly="true" /><br />
        </MudItem>
        <MudItem lg="4">
            <div Class="d-flex">
                <MudText Class="mr-auto" Typo="Typo.h6">Tasks</MudText>
                <MudButton Variant="Variant.Outlined" OnClick="@(() => NavigateNewTask())">New Story</MudButton>
            </div>
                
                @if (Story.Tasks != null)
                {
                    <MudList>
                        @foreach (var task in Story.Tasks)
                        {
                            <MudListItem>
                                <MudPaper>
                                    <MudText Typo="Typo.overline">@task.Name</MudText>
                                    <div Class="d-flex flex-row-reverse">
                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small" @onclick="@(() => NavigateViewTask(task.TaskId,Story.StoryId))" />
                                        <MudChip Color="@GetStatus(task.Status).Color" Size="Size.Small">@GetStatus(task.Status).Value</MudChip>
                                    </div>
                                    @if (task.Users != null)
                                    {
                                        <div Class="d-flex flex-row-reverse">
                                            @foreach (var user in task.Users)
                                            {
                                                <MudText Typo="Typo.overline">@user.FirstName @user.LastName |</MudText>
                                            }
                                        </div>
                                    }
                                </MudPaper>
                            </MudListItem>
                            <MudDivider DividerType="DividerType.FullWidth" />
                        }
                    </MudList>
                }
        </MudItem>
    </MudGrid>

</MudContainer>




@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "index"),
        new BreadcrumbItem("Kanboard", href: "viewkanboard"),

    };
    [Parameter]
    public long StoryId { get; set; }

    private StoryDTO Story { get; set; } = new StoryDTO();

    private Dictionary<string, object> editorConf = new Dictionary<string, object>
    {
            { "plugins", "lists emoticons " },
            {"menubar", "" },

            { "toolbar", "bold italic underline strikethrough | numlist bullist checklist | alignleft aligncenter alignright alignjustify | outdent indent emoticons"},
        { "readonly", "1" }
     };
    protected async override System.Threading.Tasks.Task OnInitializedAsync()
    {
        try
        {
            Story = await StoryService.GetStory(StoryId);
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Error Loading Story", Severity.Error);
        }
        await base.OnInitializedAsync();
    }

    private void NavigateEditStory(long id)
    {
        try
        {
            NavigationManager.NavigateTo($"/editstory/{id}");
        }
        catch(Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Navigation Error", Severity.Error);
        }
    }
    private void NavigateViewTask(long taskId, long storyId)
    {
        try
        {
            NavigationManager.NavigateTo($"/viewtask/{taskId}/{storyId}");
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Navigation Error", Severity.Error);
        }
    }
    private void NavigateNewTask()
    {
        try
        {
            NavigationManager.NavigateTo($"/edittask/0/{StoryId}");
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Navigation Error", Severity.Error);
        }
    }
    
    private Status GetStatus(int status)
    {

        if (status == 0)
        {
            return new Status() { Color = Color.Dark, Value = "NOT-STARTED" };
        }
        else if (status == 1)
        {
            return new Status() { Color = Color.Warning, Value = "IN-PROGRESS" };
        }
        else if (status == 2)
        {
            return new Status() { Color = Color.Success, Value = "COMPLETED" };
        }
        else
        {
            return new Status() { Color = Color.Dark, Value = "UN-DEFINED" };
        }

    }

}
