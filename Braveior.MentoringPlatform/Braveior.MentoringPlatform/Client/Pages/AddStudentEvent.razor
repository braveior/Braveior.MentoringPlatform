@namespace Braveior.MentoringPlatform.Client.Pages
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IProfileService ProfileService
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Add Student Event
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudRadioGroup @bind-SelectedOption="@StudentEvent.Type">
                <MudRadio Option="@(1)" Color="Color.Primary">Group Discussion</MudRadio>
                <MudRadio Option="@(2)" Color="Color.Secondary">Hackathon</MudRadio>
                <MudRadio Option="@(3)" Color="Color.Secondary">R & D Solutioning</MudRadio>
            </MudRadioGroup>
            <MudAutocomplete T="EventDTO" Label="Choose Event" @bind-Value="SelectedEvent" SearchFunc="@SearchEvent" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <AuthorizeView Roles="2">
                <Authorized>
                    <MudTextField T="long" Variant="Variant.Outlined" @bind-Value="@StudentEvent.Points" />
                    <MudRadioGroup @bind-SelectedOption="@StudentEvent.Status">
                        <MudRadio Option="@(0)" Color="Color.Primary">Pending</MudRadio>
                        <MudRadio Option="@(1)" Color="Color.Secondary">Approved</MudRadio>
                    </MudRadioGroup>
                </Authorized>
            </AuthorizeView>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Primary" OnClick="@(() => CraeteStudentEvent())">Add Event</MudButton>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Default" OnClick="Cancel">Close</MudButton>
        </DialogActions>
    </MudDialog>


    @code {
        private EventDTO SelectedEvent = new EventDTO();

        //private long points = 0;

        //private int status = 0;

        [CascadingParameter] MudDialogInstance MudDialog { get; set; }

        [Parameter] public StudentActivityDTO StudentEvent { get; set; }

        private void Cancel()
        {
            MudDialog.Cancel();
        }
        protected override async Task OnInitializedAsync()
        {
            //points = StudentActivity.Points;
            //status = StudentActivity.Status;
        }


        private async Task CraeteStudentEvent()
        {
            try
            {
                StudentEvent.EventId = SelectedEvent.EventId;
                await ProfileService.AddStudentEvent(StudentEvent);
                MudDialog.Close();
            }
            catch(Exception ex)
            {
                Snackbar.Clear();
                Snackbar.Add("Error", Severity.Error);
            }
        }
        private string GetActivityName(int id)
        {
            switch (id)
            {
                case 1:
                    return "Group Discussion";
                case 2:
                    return "Hackathon";
                case 3:
                    return "R & D Solutioning";
                case 4:
                    return "Challenge";
                case 5:
                    return "Vlog";
                case 6:
                    return "Blog";
                default:
                    return "General";
            }
        }
        private string GetActivityStatus(int id)
        {
            switch (id)
            {
                case 0:
                    return "Pending";
                case 1:
                    return "Approved";
                default:
                    return "Pending";
            }
        }
        private bool IsEvent(int id)
        {
            if (id == 1 || id == 2 || id == 3)
            {
                return true;
            }
            else
                return false;
        }
        private async Task<IEnumerable<EventDTO>> SearchEvent(string key)
        {
            return await ProfileService.GetEvents();
        }
    }