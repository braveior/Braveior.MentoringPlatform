@page "/viewkanboard"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IStoryService StoryService
@inject ISnackbar Snackbar
@using Plk.Blazor.DragDrop

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid>
        <MudItem xs="12">
            <MudButton Variant="Variant.Outlined" OnClick="@(() => NavigateNewStory())">New Story</MudButton>
        </MudItem>
            <MudItem xs="4">
                <MudChip Label="true" Color="Color.Primary">To-Do</MudChip>
                <Dropzone Items="ToDo" TItem="StoryDTO">
                    <MudPaper Elevation="2">
                        <div Class="d-flex flex-row-reverse"><MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" @onclick="@(() => NavigateViewStory(context.StoryId))" /></div>
                        <MudText Typo="Typo.subtitle2">@context.Name</MudText>
                    </MudPaper>
                </Dropzone>
            </MudItem>
            <MudItem xs="4">
                <MudChip Label="true" Color="Color.Primary">In-Progress</MudChip>
                <Dropzone Items="InProgress" TItem="StoryDTO">
                    <MudPaper Elevation="2">
                        <div Class="d-flex flex-row-reverse"><MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" @onclick="@(() => NavigateViewStory(context.StoryId))" /></div>
                        <MudText Typo="Typo.subtitle2">@context.Name</MudText>
                    </MudPaper>
                </Dropzone>
            </MudItem>
            <MudItem xs="4">
                <MudChip Label="true" Color="Color.Primary">Completed</MudChip>
                <Dropzone Items="Completed" TItem="StoryDTO">
                    <MudPaper Elevation="2">
                        <div Class="d-flex flex-row-reverse"><MudIcon Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" @onclick="@(() => NavigateViewStory(context.StoryId))" /></div>
                        <MudText Typo="Typo.subtitle2">@context.Name</MudText>
                    </MudPaper>
                </Dropzone>
            </MudItem>
    </MudGrid>
</MudContainer>




@code {

    public string TextValue { get; set; }
    private LoginDTO member = new LoginDTO();
    bool isShow;
    bool success;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    ClaimsPrincipal claimsPrincipal;
    MudForm frmLogin;
    KanboardDTO Kanboard = new KanboardDTO();
    List<StoryDTO> Backlog = new List<StoryDTO>();
    List<StoryDTO> ToDo = new List<StoryDTO>();
    List<StoryDTO> InProgress = new List<StoryDTO>();
    List<StoryDTO> Completed = new List<StoryDTO>();

    [Inject]
    private IState<CommonState> CommonState { get; set; }

    //Global Authentication State to get the Login Status and data
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override System.Threading.Tasks.Task OnInitializedAsync()
    {
        try
        {
            Kanboard = await StoryService.GetKanboard(CommonState.Value.LoggedInUser.Group.KanboardId);
            //var stories = await StoryService.GetStories(CommonState.Value.LoggedInUser.UserId);
            if (Kanboard.Stories != null && Kanboard.Stories.Count > 0)
            {
                ToDo = Kanboard.Stories.Where(t => t.Status == 0).ToList();
                InProgress = Kanboard.Stories.Where(t => t.Status == 1).ToList();
                Completed = Kanboard.Stories.Where(t => t.Status == 2).ToList();
            }
        }
        catch(Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Error loading data", Severity.Error);
        }
        await base.OnInitializedAsync();
    }
    private void NavigateViewStory(long storyid)
    {
        NavigationManager.NavigateTo($"/viewstory/{storyid}");
    }

    private void NavigateNewStory()
    {
        NavigationManager.NavigateTo($"/editstory/{0}/{Kanboard.KanboardId}");
    }




}