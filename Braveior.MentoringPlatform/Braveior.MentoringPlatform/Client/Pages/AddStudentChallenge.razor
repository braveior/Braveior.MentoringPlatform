@namespace Braveior.MentoringPlatform.Client.Pages
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IProfileService ProfileService
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Add Student Challenge
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudAutocomplete T="ChallengeDTO" Label="Choose Challenge" @bind-Value="SelectedChallenge" SearchFunc="@SearchChallenge" ToStringFunc="@(e=> e==null?null : $" {e.Name}")" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <AuthorizeView Roles="2">
                <Authorized>
                    <MudTextField T="long" Variant="Variant.Outlined" Label="Points" @bind-Value="@StudentChallenge.Points" />
                </Authorized>
            </AuthorizeView>
            <MudTextField T="string" Variant="Variant.Outlined" Label="URL" @bind-Value="@StudentChallenge.AssetUrl" />
            <MudDatePicker Label="Date" Editable="true" @bind-Date="@StudentChallenge.CreatedDate" />
            <AuthorizeView Roles="2">
                <Authorized>
                    <MudRadioGroup @bind-SelectedOption="@StudentChallenge.Status">
                        <MudRadio Option="@(0)" Color="Color.Primary">Pending</MudRadio>
                        <MudRadio Option="@(1)" Color="Color.Secondary">Approved</MudRadio>
                    </MudRadioGroup>
                </Authorized>
            </AuthorizeView>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Primary" OnClick="@(() => CreateStudentChallenge())">Add Challenge</MudButton>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Small" Color="Color.Default" OnClick="Cancel">Close</MudButton>
        </DialogActions>
    </MudDialog>


    @code {
        private ChallengeDTO SelectedChallenge = new ChallengeDTO();
        private SkillDTO skill;

        //private long points = 0;

        //private int status = 0;

        [CascadingParameter] MudDialogInstance MudDialog { get; set; }

        [Parameter] public StudentActivityDTO StudentChallenge { get; set; }

        private void Cancel()
        {
            MudDialog.Cancel();
        }

        private async Task CreateStudentChallenge()
        {
            try
            {
                StudentChallenge.ChallengeId = SelectedChallenge.ChallengeId;
                await ProfileService.AddStudentChallenge(StudentChallenge);
                MudDialog.Close();
            }
            catch (Exception ex)
            {
                Snackbar.Clear();
                Snackbar.Add("Error", Severity.Error);
            }
        }

        private async Task<IEnumerable<ChallengeDTO>> SearchChallenge(string key)
        {
            return await ProfileService.GetChallenges();
        }


    }