@page "/assets"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IProfileService ProfileService
@inject ISnackbar Snackbar
<MudTable Dense="true" Items="@AssetsList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        @*<MudTh></MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh>Memory</MudTh>
        <MudTh>No of Pods</MudTh>
        <MudTh>CPU Core</MudTh>
        <MudTh>Storage</MudTh>
        <MudTh>Memory Pressure</MudTh>
        <MudTh>Disk Pressure</MudTh>
        <MudTh>PID Pressure</MudTh>
        <MudTh>Ready</MudTh>*@
    </HeaderContent>
    <RowTemplate>
        @*<MudTd><MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => NavigateNodeDetails(@context.Metadata.Name))">Details</MudButton></MudTd>
        <MudTd DataLabel="Name">@context.Metadata.Name</MudTd>
        <MudTd DataLabel="CreatedDate">@context.Metadata.CreationTimestamp</MudTd>
        <MudTd DataLabel="Memory">@GetMemoryinMib(context.Status.Capacity["memory"])</MudTd>
        <MudTd DataLabel="NoOfPods">@context.Status.Capacity["pods"]</MudTd>
        <MudTd DataLabel="CPUCore">@context.Status.Capacity["cpu"]</MudTd>
        <MudTd DataLabel="Storage">@GetMemoryinMib(context.Status.Capacity["ephemeral-storage"])</MudTd>
        <MudTd DataLabel="MemoryPressure">
            @if (HasMemoryPressure(context.Status.Conditions) == false)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="DiskPressure">
            @if (HasDiskPressure(context.Status.Conditions) == false)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="PIDPressure">
            @if (HasPIDPressure(context.Status.Conditions) == false)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="Ready">
            @if (ISReady(context.Status.Conditions) == true)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>*@

    </RowTemplate>
</MudTable>

@code {

    private List<AssetDTO> AssetsList { get; set; } = new List<AssetDTO>();

    //protected async override System.Threading.Tasks.Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        Assets = await StoryService.GetTask(TaskId);
    //        _items.Add(new BreadcrumbItem("Story", href: $"viewstory/{StoryId}"));
    //    }
    //    catch(Exception ex)
    //    {
    //        Snackbar.Clear();
    //        Snackbar.Add("Error fetching task", Severity.Error);
    //    }
    //    await base.OnInitializedAsync();
    //}

    //private void NavigateEditTask(long taskId)
    //{
    //    try
    //    {
    //        NavigationManager.NavigateTo($"/edittask/{taskId}/{StoryId}");
    //    }
    //    catch(Exception ex)
    //    {
    //        Snackbar.Clear();
    //        Snackbar.Add("Navigation Error", Severity.Error);
    //    }
    //}
    //private Status GetStatus(int status)
    //{

    //    if (status == 0)
    //    {
    //        return new Status() { Color = Color.Dark, Value = "NOT-STARTED" };
    //    }
    //    else if (status == 1)
    //    {
    //        return new Status() { Color = Color.Warning, Value = "IN-PROGRESS" };
    //    }
    //    else if (status == 2)
    //    {
    //        return new Status() { Color = Color.Success, Value = "COMPLETED" };
    //    }
    //    else
    //    {
    //        return new Status() { Color = Color.Dark, Value = "UN-DEFINED" };
    //    }

    //}

}
