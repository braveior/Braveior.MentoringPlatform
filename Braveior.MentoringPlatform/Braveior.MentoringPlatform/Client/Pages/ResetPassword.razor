@page "/resetpassword"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IProfileService ProfileService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraSmall">

    <MudCard Class="mt-16">
        <MudCardContent>
            <MudForm @bind-IsValid="@success" @ref="frmLogin">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Password1" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" Required="true"
                                      RequiredError="Password is required!" OnAdornmentClick="ToggleTextVisibility"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField  @bind-Value="Password2" Label="Repeat Password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" Required="true"
                                      RequiredError="Password is required!" OnAdornmentClick="ToggleTextVisibility"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton  FullWidth="true"  Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Disabled="@(!success)" OnClick="ChangePassword" >Submit</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>




@code {
    public string Password1 { get; set; }
    public string Password2 { get; set; }
    private LoginDTO member = new LoginDTO();
    bool isShow;
    bool success;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    ClaimsPrincipal claimsPrincipal;
    MudForm frmLogin;


    //Global Authentication State to get the Login Status and data
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private IState<CommonState> CommonState { get; set; }

    private async Task ChangePassword()
    {
        try
        {
            if (Password1 != Password2)
            {
                throw new Exception("Password's dont match");
            }
            CommonState.Value.LoggedInUser.Password = Password2;
            await ProfileService.ResetPassword(CommonState.Value.LoggedInUser);
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    /// <summary>
    /// Method to toggle visibility of the Password field
    /// </summary>
    void ToggleTextVisibility()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

}