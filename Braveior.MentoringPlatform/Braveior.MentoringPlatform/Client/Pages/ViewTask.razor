@page "/viewtask/{TaskId:long}/{StoryId:long}"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IStoryService StoryService
@inject ISnackbar Snackbar
@using TinyMCE.Blazor
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    <MudGrid>
        <MudItem lg="8">
            <MudText Typo="Typo.h6">Task</MudText>
            <MudText Typo="Typo.subtitle2">@Task.Name</MudText><br />
            <MudText Typo="Typo.subtitle2">Status</MudText>
            <MudChip Color="@GetStatus(Task.Status).Color" Size="Size.Medium">@GetStatus(Task.Status).Value</MudChip>
            <MudText Typo="Typo.subtitle2">Description</MudText>
            <Editor Conf="@editorConf" @bind-Value="@Task.Description" ApiKey="l2er93kpxdnkksdayrfy7mrocgpxan4mjxhfz8etl31lxzul" /><br />
        </MudItem>
        <MudItem lg="4">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Large" @onclick="@(() => NavigateEditTask(Task.TaskId))" />
            
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "index"),
        new BreadcrumbItem("Kanboard", href: "kanboard")

    };
    [Parameter]
    public long TaskId { get; set; }

    [Parameter]
    public long StoryId { get; set; }

    private TaskDTO Task { get; set; } = new TaskDTO();

    private Dictionary<string, object> editorConf = new Dictionary<string, object>
    {
            { "plugins", "lists emoticons " },
            {"menubar", "" },
            { "toolbar", "bold italic underline strikethrough | numlist bullist checklist | alignleft aligncenter alignright alignjustify | outdent indent emoticons"},
            { "readonly", "1" }
     };
    protected async override System.Threading.Tasks.Task OnInitializedAsync()
    {
        try
        {
            Task = await StoryService.GetTask(TaskId);
            _items.Add(new BreadcrumbItem("Story", href: $"viewstory/{StoryId}"));
        }
        catch(Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Error fetching task", Severity.Error);
        }
        await base.OnInitializedAsync();
    }

    private void NavigateEditTask(long taskId)
    {
        try
        {
            NavigationManager.NavigateTo($"/edittask/{taskId}/{StoryId}");
        }
        catch(Exception ex)
        {
            Snackbar.Clear();
            Snackbar.Add("Navigation Error", Severity.Error);
        }
    }
    private Status GetStatus(int status)
    {

        if (status == 0)
        {
            return new Status() { Color = Color.Dark, Value = "NOT-STARTED" };
        }
        else if (status == 1)
        {
            return new Status() { Color = Color.Warning, Value = "IN-PROGRESS" };
        }
        else if (status == 2)
        {
            return new Status() { Color = Color.Success, Value = "COMPLETED" };
        }
        else
        {
            return new Status() { Color = Color.Dark, Value = "UN-DEFINED" };
        }

    }

}
